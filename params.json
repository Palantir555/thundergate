{"name":"Thundergate","tagline":"an open source toolkit for PCI bus exploration","body":"# Introduction #\r\n\r\nThunderGate is a collection of tools for the manipulation of Tigon3 Gigabit\r\nEthernet controllers, with special emphasis on the Broadcom NetLink 57762,\r\nsuch as is found in Apple Thunderbolt Gigabit Ethernet adapters.\r\n\r\nTigon3 controllers contain a variety of architectural blocks, including a PCI\r\nendpoint, an 802.3 media access controller, on-chip ram, DMA read and write\r\nengines, nonvolatile storage, and one or more MIPS processors.\r\n\r\nThese features are exposed by ThunderGate through an easy-to-use Python\r\ninterface, allowing for reverse engineering, development, and deployment of\r\ncustom firmware and applications. Examples provided include a userspace VFIO\r\ntap driver, a firmware application capable of transparently monitoring\r\nnetwork traffic and host memory, and a PCI option rom containing an EFI boot\r\nservices driver which inhibits the employ of Intel I/O MMU address\r\ntranslation (VT-d).\r\n\r\n# Warning #\r\n\r\nThis is experimental software made available to you under the terms of\r\nthe GPLv3. You assume all risks in using it. Please refer to the COPYING file\r\nfor details.\r\n\r\n# Installation #\r\n\r\nThese instructions assume a Debian 8 host.\r\n\r\n1. Install dependencies:\r\n\r\n    ~~~\r\n    $ sudo apt-get install build-essential curl texinfo flex git     \\\r\n          ca-certificates gnu-efi python python-ctypeslib libgmp-dev \\\r\n          libmpfr-dev libmpc-dev python-capstone ipython\r\n    ~~~\r\n\r\n2. Clone repository:\r\n\r\n    ~~~\r\n$ git clone http://github.com/sstjohn/thundergate.git\r\n    ~~~\r\n\r\n3. Retrieve, compile and install cross mips-elf binutils:\r\n\r\n    ~~~\r\n    $ curl -O http://ftp.gnu.org/gnu/binutils/binutils-2.25.tar.bz2\r\n    $ tar xfi binutils-2.25.tar.bz2\r\n    $ mkdir binutils-build\r\n    $ pushd binutils-build\r\n    $ ../binutils-2.25/configure --target=mips-elf --with-sysroot \\\r\n            --disable-nls\r\n    $ make && sudo make install && popd\r\n    ~~~\r\n\r\n4. Retrieve, patch, compile and install cross mips-elf GCC 5.1:\r\n\r\n    ~~~\r\n$ curl -O http://ftp.gnu.org/gnu/gcc/gcc-5.1.0/gcc-5.1.0.tar.bz2\r\n$ tar xfi gcc-5.1.0.tar.bz2\r\n$ pushd gcc-5.1.0\r\n$ patch -p1 < ../thundergate/misc/gcc-5.1.0-mtigon.patch\r\n$ popd\r\n$ mkdir gcc-build\r\n$ pushd gcc-build\r\n$ ../gcc-5.1.0/configure --target=mips-elf --program-prefix=mips-elf-  \\\r\n        --disable-biarch --enable-languages=c,c++ --without-headers        \\\r\n        --without-llsc --with-tune=r6000 --with-arch=mips2 --disable-nls   \\\r\n        --disable-multilib --with-float=soft --without-hard-float\r\n$ make all-gcc && make all-target-libgcc\r\n$ sudo make install-gcc && sudo make install-target-libgcc && popd\r\n    ~~~\r\n\r\n5. Compile ThunderGate:\r\n\r\n    ~~~\r\n$ cd thundergate\r\n$ make\r\n    ~~~\r\n\r\n# Setup #\r\n\r\nYou should begin by taking a backup image of the factory-released firmware as\r\nit was when you bought the device. This image can be used to restore the device\r\nto a working state in the event that you should break it using ThunderGate.\r\nSee `man ethtool` for details on conducting a device firmware dump.\r\n\r\nIn order to launch ThunderGate, you will need to know the BDF\r\n(Bus-Device-Function) of your Tigon3 device. This information can be\r\nobtained from, e.g., ```lspci```:\r\n\r\n~~~\r\n$ sudo lspci -d14e4: | grep Ethernet\r\n0a:00.0 Ethernet controller: Broadcom Corporation NetXtreme BCM57762 Gigabit Ethernet PCIe\r\n~~~\r\n\r\nAs is commonly the case on Apple hardware, the BDF for the Thunderbolt\r\nGigabit in this example is '0a:00.0'.\r\n\r\nIn order to use the userspace tap driver, the network interface device\r\nwill need to be bound to the ```vfio-pci``` kernel module:\r\n~~~\r\n$ sudo modprobe vfio-pci\r\n$ echo $BDF | sudo tee /sys/bus/pci/devices/$BDF/driver/unbind\r\n$ echo $BDF | sudo tee /sys/bus/pci/drivers/vfio-pci/bind\r\n~~~\r\n\r\nAll other functionality is available regardless of the kernel driver in use.\r\n\r\n# Usage #\r\n\r\n<pre>\r\n$ py/main.py -h\r\nusage: main.py [-h] [-v] [-d] [-t] [-s] device\r\n\r\npositional arguments:\r\n  device        BDF of tg3 PCI device\r\n\r\noptional arguments:\r\n  -h, --help    show this help message and exit\r\n  -v, --vfio    use vfio interface\r\n  -d, --driver  load userspace tap driver\r\n  -t, --tests   run tests\r\n  -s, --shell   ipython cli\r\n</pre>\r\n\r\n## EFI PCI OpRom ##\r\n\r\nThe example EFI PCI Option Rom code lives under the 'dmarf/' directory. It can\r\nbe installed to the target device from the ThunderGate CLI as follows:\r\n~~~\r\nIn <1>: dev.nvram.init(wr=1)\r\nIn <2>: dev.nvram.load_efi_drv(\"dmarf/dmarf.efi\")\r\n~~~\r\n\r\n## MIPS CPU firmware application ##\r\n\r\nThe example Tigon3 MIPS core firmware application code lives under the 'fw/'\r\ndirectory. It can be installed to the target device from the ThunderGate CLI\r\nas follows:\r\n~~~\r\nIn <1>: dev.nvram.init(wr=1)\r\nIn <2>: dev.load_rxcpu_fw(\"fw/nvimage\")\r\n~~~\r\n","google":"UA-40740194-5","note":"Don't delete this file! It's used internally to help with page regeneration."}